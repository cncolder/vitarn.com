import path from 'path'
import autoprefixer from 'autoprefixer'
import webpack from 'webpack'
import pkg from './package.json'
import env from './lib/env'


const join = p => path.join(__dirname, p)
const version = pkg.version

export default {
  entry: {
    client: env.local ? [
      /**
       * https://github.com/glenjamin/webpack-hot-middleware#config
       *
       * path - The path which the middleware is serving the event stream on
       * timeout - The time to wait after a disconnection before attempting to reconnect
       * overlay - Set to false to disable the DOM-based client-side overlay.
       * reload - Set to true to auto-reload the page when webpack gets stuck.
       * noInfo - Set to true to disable informational console logging.
       * quiet - Set to true to disable all console logging.
       */
      'webpack-hot-middleware/client?reload=true&overlay=false',
      'style!./client/less/index.less',
      './client',
    ] : [
      'file?name=css/client.css!extract!./client/less/index.less',
      './client',
    ],
    // vendor: [
    //   './client/css/animate.min.css',
    //   './client/css/bootstrap.min.css',
    //   './client/css/font-awesome.min.css',
    //   './client/js/jquery.min.js',
    //   './client/js/bootstrap.min.js',
    //   './client/js/jquery.easing.min.js',
    //   './client/js/jquery.fittext.js',
    //   './client/js/jquery.qrcode.min.js',
    //   './client/js/wow.min.js',
    // ],
  },
  output: {
    path: join('./public/'),
    filename: 'js/[name].js',
    // publicPath: '/js/',
  },
  devtool: env.local ? 'inline-source-map' : [],
  resolve: {
    extensions: ['', '.webpack.js', '.web.js', '.js', '.babel', '.jsx'],
  },
  module: {
    noParse: [
      /jquery|min/,
      /img/,
    ],
    loaders: [{
      test: /\.(babel|jsx?)$/,
      include: /client|lib/,
      exclude: /node_modules/,
      loader: 'babel',
      query: {
        presets: ['es2015', 'stage-0', 'react', ],
        cacheDirectory: true,
        plugins: ['transform-runtime'],
      },
    }, {
      test: /\.less$/,
      loader: 'css!postcss!less?noIeCompat',
    }, {
      test: /\.(jpg)$/,
      loader: 'url',
      query: {
        limit: 10 * 1000, // 10kb
        minetype: 'application/font-woff',
      },
    }, {
      test: /\.woff(2)?/,
      loader: 'url',
      query: {
        limit: 10 * 1000, // 10kb
        minetype: 'application/font-woff',
      },
    }, {
      test: /\.(ttf)/,
      loader: 'url',
      query: {
        limit: 10 * 1000, // 10kb
        minetype: 'application/octet-stream',
      },
    }, {
      test: /\.(eot|svg)/,
      loader: 'file',
      query: {
        name: 'fonts/[name].[ext]',
      },
    }, ],
  },
  postcss: () => [autoprefixer],
  plugins: [
    new webpack.optimize.CommonsChunkPlugin({
      name: 'vendor',
      filename: 'js/vendor.js',
    }),
    new webpack.optimize.OccurrenceOrderPlugin(true),
  ].concat(env.local ? [
    new webpack.DefinePlugin({
      'process.env': {
        NODE_ENV: JSON.stringify('development'),
        VERSION: JSON.stringify(version),
      },
    }),
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoErrorsPlugin(),
  ] : [
    new webpack.DefinePlugin({
      'process.env': {
        NODE_ENV: JSON.stringify('production'),
        VERSION: JSON.stringify(version),
      },
    }),
    new webpack.optimize.DedupePlugin(),
    new webpack.optimize.UglifyJsPlugin({
      minimize: true,
      sourceMap: false,
      compressor: {
        warnings: false,
      },
    }),
  ]),
}
